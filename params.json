{"name":"Wraith","tagline":"Wireless reconnaissance, collection and exploitation toolsuite.","body":"![](widgets/icons/wraith-banner.png?raw=true)\r\n# WRAITH: Wireless Reconnaissance And Intelligent Target Harvesting.\r\n\r\n> \"You knew that I reap where I have not sown and gather where I scattered no seed.\"\r\n\r\n## 1 DESCRIPTION:\r\nAttack vectors, rogue devices, interfering networks are best visualized and identified\r\nover time. Current tools i.e. Kismet, Aircrack-ng and Wireshark are excellent tools\r\nbut none are completely suitable for collecting and analyzing the 802.11 environment\r\nover a period of time without that is, implementing a custom interface.\r\n\r\nWhile originally intending to develop such a custom interface to one or more Kismet\r\nbased sensors, Wraith evolved. Kismet did not offer enough information, Wireshark\r\noffered too much. Wraith is an attempt to develop a toolsuite that eases the\r\ncollection, collation and analysis of temporal 802.11 data in order to provide\r\nadministrators with the ability to view their network(s) from a bird's eye view and\r\ndrill down as necessary to a single device. Wraith allows the user to decide what\r\ndata to view, how to view it and 'when' to view it.\r\n\r\n## 2. REQUIREMENTS: \r\n * linux (tested on 3.13.x kernel)\r\n   - NOTE: some cards i.e. rosewill usb nics were not fully supported through iw\r\n     on earlier 3.13.x kernels\r\n * Python 2.7\r\n * iw 3.17\r\n * postgresql 9.x (tested on 9.3.5)\r\n * pyscopg > 2.6\r\n * mgrs 1.1\r\n * macchanger 1.7.0\r\n\r\n## 3. MODULES: Currently consists of three main components/modules: Wifi, Iyri and\r\nthe GUI and three secondary modules: utils, widgets, and nidus.\r\n\r\n###  a. wifi (v 0.0.5): 802.11 network interface objects and functions\r\n\r\nObjects/functions to manipulate wireless nics and parse 802.11 captures.\r\n\r\n#### Standards\r\n* Currently Supported: 802.11a\\b\\g\r\n* Partially Supported: 802.11n\r\n* Not Supported: 802.11s\\y\\u\\ac\\ad\\af\r\n\r\n### b. iryi (v 0.2.1): Wraith Sensor\r\n\r\nIryi is a 802.11 sensor consisting of an optional radio (shama), and a mandatory\r\nradio (abad). 802.11 packets are stored in a circular buffer, parsed and inserted\r\nin the database. Any geolocational data is also stored (if a gps device is present).\r\n\r\nNOTE:\r\nIn earlier versions < 0.1.x, Iyri did not handle database writes/updates. Rather\r\nthis was handled by an additional module colocated on the same system as database\r\nthat the sensor would pass data to. It was with great relunctance that I removed\r\nthis 'mediator', and moved database functionality directly to the sensor, primarily\r\nfor two reasons:\r\n * it would restrict wraith to a single platform i.e. expanding to a central\r\n  database and multiple sensors will be very difficult.\r\n * sensors could no longer be used on 'minimal' systems i.e. routers and other embedded\r\n  systems\r\nHowever, there were two primary reasons for doing so:\r\n * I wanted to push more autonomy and intelligence into the sensor which would\r\n   require the sensor to parse out radiotap and mpdu (no point in doing this twice)\r\n * frames (as strings) were being passed through multiple connection, queues and\r\n   sockets before they eventually made their way to the mediator causing a major\r\n   delay in processing\r\n\r\n### d. wraith-rt: GUI\r\n\r\nIn progress gui. Currently configured to provide start/stop of services, display\r\nand editing of configuration files, some manipulation of backened storage.\r\n\r\n### e. utils: utility functionality\r\n\r\nProvides various functions used throughout wraith. See Architecture section for\r\nfurther information.\r\n\r\n### f. widgets: gui super classes\r\n\r\nDefines a graphic suite based on Tkinter/ttk where a set of non-modal panels operate\r\nunder the control of a master panel and execute tasks, display information\r\nindependently of or in conjuction with this panel and other panels. (Think undocked\r\nwindows).\r\n\r\n### g. nidus: database\r\n\r\nProvides the Postgresql database schema, nidus.sql.\r\n\r\n## 4. ARCHITECTURE/HEIRARCHY: Brief Overview of the project file structure\r\n\r\n* wraith/               Top-level package\r\n - \\_\\_init\\_\\_.py      initialize the top-level\r\n - wraith-rt.py         the main Panel gui\r\n - subpanels.py         child panels\r\n - wraith.conf          gui configuration file\r\n - LICENSE              software license\r\n - README.md            this file\r\n - CONFIGURE.txt        setup details\r\n - TODO                 todos for each subpackage\r\n * widgets              gui subpackage\r\n     *  icons           icons folder\r\n     -  \\_\\_init\\_\\_.py initialize widgets subpackage\r\n     -  panel.py        defines Panel and subclasses for gui\r\n * utils                utility functions\r\n    -  \\_\\_init\\_\\_.py  initialize utils subpackage\r\n    - bits.py           bitmask functions\r\n    - timestamps.py     timestamp conversion functions\r\n    - landnav.py        land navigation utilities\r\n    - cmdline.py        various cmdline utilities for testing processes\r\n    - simplepcap.py     pcap writer\r\n    - brine.py          support for pickling connection objects\r\n    - valrep.py         validation and reporting functionality\r\n *  data                data folder\r\n    - oui.txt           tab seperated oui manufacturer file\r\n *  wifi                subpackage for wifi related\r\n     - \\_\\_init\\_\\_.py  initialize radio subpackage\r\n     - iwtools.py       iwconfig, ifconfig interface and nic utilities\r\n     - iw.py            iw 3.17 interface\r\n     - radiotap.py      radiotap parsing\r\n     - mpdu.py          IEEE 802.11 MAC (MPDU) parsing\r\n     - dott1u.py        contstants for 802.11u (not currently used)\r\n     - channels.py      802.11 channel, freq utilities\r\n     - mcs.py           mcs index functions\r\n     - oui.py           oui/manuf related functions\r\n * nidus                database schema\r\n     - \\_\\_init\\_\\_.py  initialize nidus subpackage\r\n     - nidus.sql        database definition\r\n *  iyri                subpackage for wraith sensor\r\n     - \\_\\_init\\_\\_.py  initialize iyri package\r\n     - iyri.conf        configuration file for iyri\r\n     - iyri.log.conf    configuration file for iyri logging\r\n     - iyri.py          primary module\r\n     - constants.py     defines several constants used by iryi\r\n     - gpsctl.py        GPS device handler\r\n     - rdoctl.py        radio controler\r\n     - tuner.py         radio scanner\r\n     - collate.py       data collation and forwarding\r\n     - thresh.py        Thresher process for parsing/writing frames\r\n     - iyrid            iyri daemon\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}